Techniques:
•	Dijkstra Shortest Path technique
Given a graph and a source vertex in the graph, it finds the shortest paths from source to all vertices in the given graph.
There are two sets, one set contains vertices included in shortest path tree, other set includes vertices not yet included in 
shortest path tree. At every step of the algorithm, vertex is found which is in the other set (set of not yet included) and has 
a minimum distance from the source.

•	Breadth First Search Traversal Technique
Breadth-first search is an algorithm for traversing or searching tree or graph data structures. It starts at the tree root,
and explores all of the neighbor nodes at the present depth prior to moving on to the nodes at the next depth level. 

•	Depth First Search Technique

The algorithm starts at the root node (selecting some arbitrary node as the root node in the case of a graph) and explores as
far as possible along each branch before backtracking.

Data Structures Used:
Graph, Collections, Deque, Arrays, Boolean, String, Integer.

How to execute/run the program? : 
Better to use .ipynb file, works perfect on Jupyter. (.py) file also works good. 

Note: 
None of the input should be empty.
Number of vertices is an Integer number
Vertex(Node) value can be alphabet or integer number
Weights should be an integer
Edge should only be between nodes that were entered before and distance in integer.
Checking for shortest path should only contain starting node that were given as input before.
